import java.util.Observable;
import java.util.Observer;
import java.util.Vector;

public class BtClass {
	public static void main(String[] args) {
		Subject real = new RealSubject();
		Subject proxy = new ProxySubject(real);
		proxy.giveMoney();
	}
}

interface Subject { // 定义一个操作的主题
	public void giveMoney(); // 给我钱。。。。。
}

class RealSubject implements Subject {
	public void giveMoney() {
		System.out.println("还钱，就两个字。。。");
	}
};

class ProxySubject implements Subject {
	private Subject sub = null;

	public ProxySubject(Subject sub) {
		this.sub = sub;
	}

	public void before() {
		System.out.println("准备刀子，绳索，毒药，电辊，锯。");
	}

	public void giveMoney() {
		this.before();
		this.sub.giveMoney(); // 代表真实的讨债人员去要银子
		this.after();
	}

	public void after() {
		System.out.println("销毁一切的罪证，我清白的。。。");
	}
};


//代理模式是一种比较好理解的设计模式。简单来说就是 我们使用代理对象来代替对真实对象(real object)的访问，
 这样就可以在不修改原目标对象的前提下，提供额外的功能操作，扩展目标对象的功能。
 代理模式的主要作用是扩展目标对象的功能，比如说在目标对象的某个方法执行前后你可以增加一些自定义的操作。



